<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
        body,
        html {
            width: 100%;
            height: 100%;
            overflow: hidden;
            margin: 0;
            font-family: "微软雅黑";
        }
        
        #allmap {
            width: 100%;
            height: 100%;
        }
    </style>
    <script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=fxw6sDtTyi5oymyB3LKFH6WE4LFmjAul"></script>
    <script type="text/javascript" src="track-points.js"></script>
    <script type="text/javascript" src="track-depiction.js"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/library/Heatmap/2.0/src/Heatmap_min.js"></script>
    <script type="text/javascript" src="hospital.js"></script>
    <title> 石家庄市新冠肺炎患者轨迹</title>
    <link rel="stylesheet" type="text/css" href="css/CSS.css">
</head>

<body>
    <div id="header">
        <div class="container">
            <div class="header_left left">
                <div class="caption">河北省 石家庄市新冠肺炎患者轨迹信息</div>
            </div>
            <ul class="header_right right">
                <li>所要查看轨迹的患者编号<b>(1-869)</b>：<input type="text" id="data" size="10px" maxlength="3" value="">
                    <button type="button" style="size: 9px, background-color: #C0C0C0" onclick="getData()">确定</button></li>
                <li><button type="button" style="size: 20px, background-color: #C0C0C0" onclick="openHeatmap()">显示热力图</button>
                    <button type="button" style="size: 20px, background-color: #C0C0C0" onclick="closeHeatmap()">关闭热力图</button>
                </li>
                </li>
            </ul>
        </div>
        <div class="container">
            <ul class="header_right left">
                <li>需要增加的病例轨迹<b>(1-869)</b>：<input type="text" id="adddata" size="10px" maxlength="3" value="">
                    <button type="button" style="size: 9px, background-color: #C0C0C0" onclick="addData()">确定</button></li>
                <li>需要删除的病例轨迹<b>(1-869)</b>：<input type="text" id="deletedata" size="10px" maxlength="3" value="">
                    <button type="button" style="size: 9px, background-color: #C0C0C0" onclick="deleteData()">确定</button></li>
            </ul>
        </div>
        <div class="container">
            <ul class="header_right left">
                <li>输入到达该点的日期<b>(xxxx-xx-xx)</b>：<input type="text" id="datedata" size="10px" maxlength="3" value="">
                    <button type="button" style="size: 9px, background-color: #C0C0C0" onclick="dateData()">确定</button></li>
                <li>输入该点的名称<b>(中文)</b>：<input type="text" id="namedata" size="10px" maxlength="3" value="">
                    <button type="button" style="size: 9px, background-color: #C0C0C0" onclick="nameData()">确定</button></li>
            </ul>
        </div>

    </div>
    <br/>
    <div id="msg"></div>
    <div id="guijidepict"></div>
    <div id="allmap"></div>
</body>

</html>
<script type="text/javascript">
    // 百度地图API功能
    var map = new BMap.Map("allmap"); // 创建Map实例
    map.centerAndZoom(new BMap.Point(114.528931, 38.04638), 12); // 初始化地图,设置中心点坐标和地图级别
    //添加地图类型控件
    map.addControl(new BMap.MapTypeControl({
        mapTypes: [
            BMAP_NORMAL_MAP,
            BMAP_HYBRID_MAP
        ]
    }));
    map.setCurrentCity(" 石家庄市"); // 设置地图显示的城市 此项是必须设置的
    map.enableScrollWheelZoom(true); //开启鼠标滚轮缩放
    var top_left_navigation = new BMap.NavigationControl(); //左上角，添加默认缩放平移控件
    var bottom_right_control = new BMap.ScaleControl({
        anchor: BMAP_ANCHOR_BOTTOM_RIGHT
    }); // 左上角，添加比例尺
    map.addControl(top_left_navigation);
    map.addControl(bottom_right_control);
    var overView = new BMap.OverviewMapControl();
    var overViewOpen = new BMap.OverviewMapControl({
        isOpen: true,
        anchor: BMAP_ANCHOR_BOTTOM_RIGHT
    });
    //添加地图类型和缩略图
    map.addControl(overView); //添加默认缩略地图控件
    map.addControl(overViewOpen); //右下角，打开

    //添加所有医院位置点
    function showHospital() {
        var myIcon = new BMap.Icon("iconhosp.png", new BMap.Size(30, 30));
        for (var h = 0; h < hospital.hospital.length; h++) {
            var hospitalmarker = new BMap.Marker(new BMap.Point(hospital.hospital[h][1], hospital.hospital[h][2]), {
                icon: myIcon
            });
            var content = hospital.hospital[h][0];
            map.addOverlay(hospitalmarker);
            addClickHandler(content, hospitalmarker);
        }
        var opts = {
            width: 250, // 信息窗口宽度
            height: 100, // 信息窗口高度
            enableMessage: true //设置允许信息窗发送短息
        };

        function addClickHandler(content, marker) {
            hospitalmarker.addEventListener("click", function(e) {
                openInfo(content, e)
            });
        }

        function openInfo(content, e) {
            var p = e.target;
            var point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);
            var infoWindow = new BMap.InfoWindow(content, opts); // 创建信息窗口对象 
            map.openInfoWindow(infoWindow, point); //开启信息窗口
        }

    }
    //加载患者的所有轨迹点
    if (document.createElement('canvas').getContext) { // 判断当前浏览器是否支持绘制海量点
        //var points = [];  // 添加海量点数据
        showHospital();
        for (var i = 0; i < data.data.length; i++) {
            var marker = new BMap.Marker(new BMap.Point(data.data[i][3], data.data[i][4]));
            var content = "病例" + data.data[i][0] + "</br>" + data.data[i][1] + ":" + data.data[i][2];
            map.addOverlay(marker);
            addClickHandler(content, marker);
        }
        var opts = {
            width: 250, // 信息窗口宽度
            height: 100, // 信息窗口高度
            title: "患者轨迹点信息", // 信息窗口标题
            enableMessage: true //设置允许信息窗发送短息
        };

        function addClickHandler(content, marker) {
            marker.addEventListener("click", function(e) {
                openInfo(content, e)
            });
        }

        function openInfo(content, e) {
            var p = e.target;
            var point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);
            var infoWindow = new BMap.InfoWindow(content, opts); // 创建信息窗口对象 
            map.openInfoWindow(infoWindow, point); //开启信息窗口
        }

    } else {
        alert('请在chrome、safari、IE8+以上浏览器查看本示例');
    }


    var queryPatientID = 0;
    var bPoints = []; //百度化坐标数组，用于更新显示范围
    //button点击事件获取文本框中填写的值
    var addpoint = new Array(); //储存年增加病历号的数组
    var index = 0; //记录增加轨迹点数组中的个数（删除时则index减少）
    var placex = new Array();
    var placey = new Array();
    placex[0] = 0;
    placey[0] = 0;
    var p = 0; //记录经纬度的下标
    var bias = new Array(); //记录每个地点的标签位移
    // var record = new Array();
    for (var i = 0; i <= 900; i++) { //先定义900个数组
        bias[i] = 0; //清0
    }
    // for (var i = 0; i <= 900; i++) { //先定义900个数组
    //     record[i] = new Array();
    // }


    function addData() { //考虑找一个数组进行储存增加过的病历号   通过数组来进维护
        var b = document.getElementById("adddata").value; //该行语句用于获取文本框中的内容
        addpoint[index++] = b; //此处能正确增加数值
        // if (index == 3) {
        //     for (var i = 0; i < index; i++) { //测试
        //         document.write(addpoint[i] + "<br />");
        //     }
        // }
        // for (var i = 0; i < index; i++) {
        //     document.getElementById("msg").innerHTML += "" + addpoint[i] + "<br />";
        // }


        map.clearOverlays(); //清除一些布局比如集合点（地点）
        // document.getElementById("msg").innerHTML = "";
        for (var i = 0; i < index; i++) { //数组循环展示i这些轨迹路线
            var a = addpoint[i]; //每次从数组中取出一个数   此处存在bug  这个取出的数值一直不变
            // document.getElementById("msg").innerHTML = "" + i + "<br />";
            // document.getElementById("msg").innerHTML += "" + addpoint[i] + "<br />";
            if (Number(a) >= 1 && Number(a) <= 869) {
                queryPatientID = Number(a);
                // place[Number(a)]++; //对应的点的数加1
                var somePatientPoints = []; //文本框中患者的轨迹点数据
                for (var j = 0; j < data.data.length; j++) {
                    if (Number(data.data[j][0]) == queryPatientID) { //当发现经过的点不止一个的时候则进行增加  使用一个二维数组进行维护
                        var marker = new BMap.Marker(new BMap.Point(data.data[j][3], data.data[j][4]));

                        //每次增加 就先进行查找 若未出现过 则增加到表中
                        var flag = 0; //标志
                        var temp = 0;
                        for (var k = 0; k < p; k++) {
                            if (data.data[j][3] == placex[k] && data.data[j][4] == placey[k]) {
                                flag = 1;
                                temp = k; //记录当前该点在数组中存在的下标
                                bias[k]++;
                                break; //查到后就退出
                            }
                        }

                        if (flag == 0) { //代表该地点第一次出现
                            somePatientPoints.push(new BMap.Point(data.data[j][3], data.data[j][4]));
                            bPoints.push(new BMap.Point(data.data[j][3], data.data[j][4]));
                            marker.setZIndex(100); //设置标注层级zIndex
                            map.addOverlay(marker);
                            marker.setLabel(new BMap.Label("病例" + data.data[j][0] + ":" + data.data[j][1] + "\n" + data.data[j][2], {
                                offset: new BMap.Size(20, -10)
                            }));
                            placex[p] = data.data[j][3];
                            placey[p] = data.data[j][4]; //进行储存
                            p++; //储存经纬度的下标增加
                        }


                        //判断当前地点出现过的话 则之后的标签都按照一定规律进行偏移
                        if (flag == 1) {
                            var marker1 = new BMap.Marker(new BMap.Point(data.data[j][3], data.data[j][4]));
                            somePatientPoints.push(new BMap.Point(data.data[j][3], data.data[j][4]));
                            bPoints.push(new BMap.Point(data.data[j][3], data.data[j][4]));
                            marker1.setZIndex(100); //设置标注层级zIndex
                            map.addOverlay(marker1);
                            marker1.setLabel(new BMap.Label("病例" + data.data[j][0] + ":" + data.data[j][1] + "\n" + data.data[j][2], {
                                offset: new BMap.Size(20, -10 + bias[k] * 20)
                            }));
                        }
                    }
                }
                addLine(somePatientPoints);
                setZoom(bPoints);
                document.getElementById("guijidepict").innerHTML = "详细轨迹描述：" + "</br>" + trackdepict.trackdepict[Number(a) - 1];
                // var address = new BMap.Point(point.lng, point.lat);
            } else if (a == "") {
                var points = []; // 显示海量点数据
                for (var i = 0; i < data.data.length; i++) {
                    var marker = new BMap.Marker(new BMap.Point(data.data[i][3], data.data[i][4]));
                    var content = "病例" + data.data[i][0] + ' \n ' + data.data[i][1] + ":" + data.data[i][2];
                    map.addOverlay(marker);
                    addClickHandler(content, marker);
                }
            } else {
                alert("请输入范围为1-869的数字字符！！！")
            }
        }
    }

    function getData() {
        var a = document.getElementById("data").value;
        if (Number(a) >= 1 && Number(a) <= 869) {
            map.clearOverlays();

            queryPatientID = Number(a);
            var somePatientPoints = []; //文本框中患者的轨迹点数据
            for (var j = 0; j < data.data.length; j++) {
                if (Number(data.data[j][0]) == queryPatientID) {
                    var marker = new BMap.Marker(new BMap.Point(data.data[j][3], data.data[j][4]));
                    somePatientPoints.push(new BMap.Point(data.data[j][3], data.data[j][4]));
                    bPoints.push(new BMap.Point(data.data[j][3], data.data[j][4]));
                    map.addOverlay(marker);
                    marker.setLabel(new BMap.Label("病例" + data.data[j][0] + ":" + data.data[j][1] + "\n" + data.data[j][2], {
                        offset: new BMap.Size(20, -10)
                    }));
                }
            }
            addLine(somePatientPoints);
            setZoom(bPoints);
            document.getElementById("guijidepict").innerHTML = "详细轨迹描述：" + "</br>" + trackdepict.trackdepict[Number(a) - 1];
            // var address = new BMap.Point(point.lng, point.lat);
        } else if (a == "") {
            var points = []; // 添加海量点数据
            for (var i = 0; i < data.data.length; i++) {
                var marker = new BMap.Marker(new BMap.Point(data.data[i][3], data.data[i][4]));
                var content = "病例" + data.data[i][0] + ' \n ' + data.data[i][1] + ":" + data.data[i][2];
                map.addOverlay(marker);
                addClickHandler(content, marker);
            }
        } else {
            alert("请输入范围为1-869的数字字符！！！")
        }
    }
    //添加线
    function addLine(points) {

        var linePoints = [],
            pointsLen = points.length,
            i, polyline;
        if (pointsLen == 0) {
            return;
        }
        // 创建标注对象并添加到地图   
        for (i = 0; i < pointsLen; i++) {
            linePoints.push(new BMap.Point(points[i].lng, points[i].lat));
        }

        polyline = new BMap.Polyline(linePoints, {
            strokeColor: "red",
            strokeWeight: 3,
            strokeOpacity: 0
        }); //创建折线
        map.addOverlay(polyline); //增加折线
    }
    //根据点信息实时更新地图显示范围，让轨迹完整显示。设置新的中心点和显示级别
    function setZoom(bPoints) {
        var view = map.getViewport(eval(bPoints));
        var mapZoom = view.zoom;
        var centerPoint = view.center;
        map.centerAndZoom(centerPoint, mapZoom);
    }

    //热力图选项
    var allpoints = []; //这里面添加经纬度a

    for (var m = 0; m < data.data.length; m++) {
        //allpoints.push(new BMap.Point(data.data[m][3], data.data[m][4]));
        var obj = {};
        obj["lng"] = Number(data.data[m][3]);
        obj["lat"] = Number(data.data[m][4]);
        obj["count"] = 10;
        allpoints.push(obj);
    }
    if (!isSupportCanvas()) {
        alert('热力图目前只支持有canvas支持的浏览器,您所使用的浏览器不能使用热力图功能~')
    }


    //判断浏览区是否支持canvas
    function isSupportCanvas() {
        var elem = document.createElement('canvas');
        return !!(elem.getContext && elem.getContext('2d'));
    }

    function setGradient() {
        var gradient = {};
        var colors = document.querySelectorAll("input[type='color']");
        colors = [].slice.call(colors, 0);
        colors.forEach(function(ele) {
            gradient[ele.getAttribute("data-key")] = ele.value;
        });
        heatmapOverlay.setOptions({
            "gradient": gradient
        });
    }

    function openHeatmap() {
        map.clearOverlays();
        heatmapOverlay = new BMapLib.HeatmapOverlay({
            "radius": 40,
            "visible": true
        });
        map.addOverlay(heatmapOverlay);
        heatmapOverlay.setDataSet({
            data: allpoints,
            max: 100
        });
        heatmapOverlay.show();

    }

    function closeHeatmap() {
        heatmapOverlay.hide();
    }
    closeHeatmap();
</script>